{"Explain what are the functionalities of Physical Layer ?": {"The lowest layer of the OSI reference model is the physical layer. It is responsible for the actual physical connection between the devices. The physical layer contains information in the form of bits. It is responsible for transmitting individual bits from one node to the next. When receiving data, this layer will get the signal received and convert it into 0s and 1s and send them to the Data Link layer, which will put the frame back together.\n\nThe functions of the physical layer are :\nBit synchronization provides the synchronization of the bits by providing a clock. This clock controls both sender and receiver thus providing synchronization at bit level.\n\nBit rate control defines the transmission rate i.e. the number of bits sent per second.\n\nPhysical topologies: Physical layer specifies the way in which the different, devices/nodes are arranged in a network i.e. bus, star or mesh topolgy.\n\nTransmission mode defines the way in which the data flows between the two connected devices. The various transmission modes possible are: Simplex, half-duplex and full-duplex.": {"Which layer is physical layer?": {"score": 0.21959051489830017, "start": 4, "end": 43, "answer": "lowest layer of the OSI reference model"}, "In which form ?": {"score": 0.847005307674408, "start": 196, "end": 201, "answer": "bits."}, "What is Bit synchronization ?": {"score": 0.40102094411849976, "start": 556, "end": 574, "answer": "providing a clock."}, "What is Bit rate ?": {"score": 0.30419081449508667, "start": 718, "end": 754, "answer": "the number of bits sent per second."}, "What are topologies ?": {"score": 0.05055354908108711, "start": 878, "end": 905, "answer": "bus, star or mesh topolgy."}, "What is Transmission mode ?": {"score": 0.40634885430336, "start": 924, "end": 998, "answer": "defines the way in which the data flows between the two connected devices."}}, "Representation of Bits: Data in this layer consists of stream of bits. The bits must be encoded into signals for transmission. It defines the type of encoding i.e. how 0's and 1's are changed to signal.\n\nData Rate: This layer defines the rate of transmission which is the number of bits per second.\n\nSynchronization: It deals with the synchronization of the transmitter and receiver. The sender and receiver are synchronized at bit level.\n\nInterface: The physical layer defines the transmission interface between devices and transmission medium.\n\nLine Configuration: This layer connects devices with the medium: Point to Point configuration and Multipoint configuration.\n\nTopologies: Devices must be connected using the following topologies: Mesh, Star, Ring and Bus.\n\nTransmission Modes: Physical Layer defines the direction of transmission between two devices: Simplex, Half Duplex, Full Duplex.\nDeals with baseband and broadband transmission.": {"Which layer is physical layer?": {"score": 0.9646593928337097, "start": 440, "end": 450, "answer": "Interface:"}, "In which form ?": {"score": 0.11779017746448517, "start": 55, "end": 70, "answer": "stream of bits."}, "What is Bit synchronization ?": {"score": 0.378316730260849, "start": 358, "end": 383, "answer": "transmitter and receiver."}, "What is Bit rate ?": {"score": 0.5867718458175659, "start": 268, "end": 299, "answer": "the number of bits per second."}, "What are topologies ?": {"score": 0.9348077774047852, "start": 742, "end": 768, "answer": "Mesh, Star, Ring and Bus."}, "What is Transmission mode ?": {"score": 0.3625640869140625, "start": 789, "end": 862, "answer": "Physical Layer defines the direction of transmission between two devices:"}}}, "what is critical section problem and how to solve it ?": {"When more than one processes access a same code segment that segment is known as critical section. Critical section contains shared variables or resources which are needed to be synchronized to maintain consistency of data variable. It means that in a group of cooperating processes, at a given point of time, only one process must be executing its critical section\n\n\nIf a process is executing in its critical section, then no other process is allowed to execute in the critical section then there is mutual exclusion.\n\nProgress : If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter in the critical section next, and  when the selection can not be postponed indefinitely then it is calle progress.\n\n\nBounded Waiting is when there exisits a  bound  on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.\n\n\nFollowing are the methods used to solve \n\nPeterson's solution is widely used solution to critical section problems.\n\nSome operating system offers a lock functionality where a Process acquires a lock when entering the Critical section and releases the lock after leaving it.\n\n\nA Semaphore is an integer variable, which can be accessed only through two operations wait() and signal().\nThere are two types of semaphores : Binary Semaphores and Counting Semaphores\n": {"what is critical section ?": {"score": 0.2678719162940979, "start": 125, "end": 154, "answer": "shared variables or resources"}, "how many process can be executed ? ": {"score": 0.2097824513912201, "start": 310, "end": 367, "answer": "only one process must be executing its critical section"}, "what is mutual exclusion ?": {"score": 0.39940857887268066, "start": 424, "end": 486, "answer": "no other process is allowed to execute in the critical section"}, "what is progress ?": {"score": 0.016997400671243668, "start": 531, "end": 581, "answer": "If no process is executing in the critical section"}, "what is bounded waiting ?": {"score": 0.0022166853304952383, "start": 937, "end": 1018, "answer": "number of times that other processes are allowed to enter their critical sections"}}, "A Critical Section is a code segment that accesses shared variables and has to be executed as an atomic action. It means that in a group of cooperating processes, at a given point of time, only one process must be executing its critical section. If any other process also wants to execute its critical section, it must wait until the first one finishes.\nProcess Synchronization is the task of coordinating the execution of processes in a way that no two processes can have access to the same shared data and resources.\nTo avoid any consistency in the result the three properties that should be considered mandatorily to implement critical section are as follow:\n\nIn Mutual Exclusion Only one process can execute its critical section at a time. The other process must wait until the previous process has completed its critical section execution completely\n\nProgress is when  process doesn\u00e2\u20ac\u2122t want to enter in its critical section. It should not be permitted to block another process from entering it, in its critical section.\n\nBounded Waiting here is when process has to wait to enter its critical section after making the request. The system can\u00e2\u20ac\u2122t keep waiting, a process for the indefinite time to enter its critical section. Anyhow the execution of the critical section takes a short duration. So, every process requesting to enter its critical section get the chance within the finite amount of time.\n\n\nSynchronization Hardware\nMany systems provide hardware support for critical section code. The critical section problem could be solved easily in a single-processor environment if we could disallow interrupts to occur while a shared variable or resource is being modified.\nIn this manner, we could be sure that the current sequence of instructions would be allowed to execute in order without pre-emption. Unfortunately, this solution is not feasible in a multiprocessor environment.\nDisabling interrupt on a multiprocessor environment can be time consuming as the message is passed to all the processors.\nThis message transmission lag, delays entry of threads into critical section and the system efficiency decreases.\n\nMutex Locks\nAs the synchronization hardware solution is not easy to implement for everyone, a strict software approach called Mutex Locks was introduced. In this approach, in the entry section of code, a LOCK is acquired over the critical resources modified and used inside critical section, and in the exit section that LOCK is released.\nAs the resource is locked while a process executes its critical section hence no other process can access it.": {"what is critical section ?": {"score": 0.31488221883773804, "start": 22, "end": 67, "answer": "a code segment that accesses shared variables"}, "how many process can be executed ? ": {"score": 0.25391659140586853, "start": 688, "end": 691, "answer": "one"}, "what is mutual exclusion ?": {"score": 0.42737606167793274, "start": 688, "end": 743, "answer": "one process can execute its critical section at a time."}, "what is progress ?": {"score": 0.4405513107776642, "start": 868, "end": 930, "answer": "when process doesn\u00e2\u20ac\u2122t want to enter in its critical section."}, "what is bounded waiting ?": {"score": 0.356603741645813, "start": 1051, "end": 1131, "answer": "when process has to wait to enter its critical section after making the request."}}, "The critical section is a code segment where the shared variables can be accessed. An atomic action is required in a critical section i.e. only one process can execute in its critical section at a time. All the other processes have to wait to execute in their critical sections.\nA solution to the critical section problem must satisfy the following three conditions:\n\nMutual Exclusion is said to exist when Out of a group of cooperating processes, only one process can be in its critical section at a given point of time.\n\nProgress is when If no process is in its critical section, and if one or more threads want to execute their critical section then any one of these threads must be allowed to get into its critical section.\n\nBounded Waiting is when a process makes a request for getting into its critical section, there is a limit for how many other processes can get into their critical section, before this process's request is granted. So after the limit is reached, system must grant the process permission to get into its critical section.\n\nFollowing are the ways to avoid critical section problem\nLock Variable\nThis is the simplest synchronization mechanism. This is a Software Mechanism implemented in User mode. This is a busy waiting solution which can be used for more than two processes.\nIn this mechanism, a Lock variable lockis used. Two values of lock can be possible, either 0 or 1. Lock value 0 means that the critical section is vacant while the lock value 1 means that it is occupied.\nA process which wants to get into the critical section first checks the value of the lock variable. If it is 0 then it sets the value of lock as 1 and enters into the critical section, otherwise it waits.": {"what is critical section ?": {"score": 0.4702374041080475, "start": 24, "end": 82, "answer": "a code segment where the shared variables can be accessed."}, "how many process can be executed ? ": {"score": 0.16238781809806824, "start": 144, "end": 147, "answer": "one"}, "what is mutual exclusion ?": {"score": 0.41933533549308777, "start": 407, "end": 447, "answer": "Out of a group of cooperating processes,"}, "what is progress ?": {"score": 0.6205263733863831, "start": 535, "end": 581, "answer": "when If no process is in its critical section,"}, "what is bounded waiting ?": {"score": 0.07626911252737045, "start": 748, "end": 817, "answer": "when a process makes a request for getting into its critical section,"}}}, "Explain software maintenance ?": {"Maintenance of a software system may be define which is used to concerned about the alteration or changes which are done in software system after the release. Maintenance of software is the part of software Engineering. Maintenance of software has a great value in the development of a system.\n\nNeeds of Maintenance is required after, When the user get the product at his own place, Installation and When software is in operational stage.\n\n\nDifferent types of software maintenance\n\nCorrective maintenance may be define with those alteration which is done for the solving those errors which was available in the software. With the help of corrective maintenance method software can change by removing all the faults. \n\nAdaptive Maintenance - Adaptive maintenance may be defined by that alteration in software system to survive in that area where this system operates.\n\nPerfective maintenance - To increase the efficiency, performance, maintainability, effectiveness of software that is called perfective maintenance .Most of the times enhancement also includes perfective maintenance as one of its part. After changes user operate this software for the purpose which it was developed by developer. \n\n": {"Why do we need software maintenance ?": {"score": 0.445067822933197, "start": 335, "end": 382, "answer": "When the user get the product at his own place,"}, "What is Corrective Maintenance ?": {"score": 0.06165970116853714, "start": 524, "end": 583, "answer": "those alteration which is done for the solving those errors"}, "What is Adaptive Maintenance ?": {"score": 0.43855613470077515, "start": 780, "end": 867, "answer": "that alteration in software system to survive in that area where this system operates."}, "What is Perfective maintenance ?": {"score": 0.7275002002716064, "start": 893, "end": 976, "answer": "To increase the efficiency, performance, maintainability, effectiveness of software"}}, "Software Maintenance is the process of modifying a software product after it has been delivered to the customer. The main purpose of software maintenance is to modify and update software application after delivery to correct faults and to improve performance.\n\nSoftware Maintenance must be performed in order to, Correct faults, Improve the design., Implement enhancements and Interface with other systems.\n\nMaintenance can be divided into the following:\nCorrective maintenance of a software product may be essential either to rectify some bugs observed while the system is in use, or to enhance the performance of the system.\n\nAdaptive maintenance This includes modifications and updations when the customers need the product to run on new platforms, on new operating systems, or when they need the product to interface with new hardware and software.\n\nPerfective maintenance is needed to support the new features that the users want or to change different types of functionalities of the system according to the customer demands.": {"Why do we need software maintenance ?": {"score": 0.212354376912117, "start": 217, "end": 260, "answer": "correct faults and to improve performance."}, "What is Corrective Maintenance ?": {"score": 0.11498803645372391, "start": 28, "end": 112, "answer": "process of modifying a software product after it has been delivered to the customer."}, "What is Adaptive Maintenance ?": {"score": 0.030914761126041412, "start": 663, "end": 690, "answer": "modifications and updations"}, "What is Perfective maintenance ?": {"score": 0.011856604367494583, "start": 880, "end": 914, "answer": "needed to support the new features"}}, "Software maintenance is a part of the Software Development Life Cycle. Its primary goal is to modify and update software application after delivery to correct errors and to improve performance. Software is a model of the real world. When the real world changes, the software require alteration wherever possible.\nSoftware Maintenance is an inclusive activity that includes error corrections, enhancement of capabilities, deletion of obsolete capabilities, and optimization\nSoftware Maintenance is needed for:-\n\n- Correct errors\n- Change in user requirement with time\n- Changing hardware/software requirements\n- To improve system efficiency\n\nFollowing are the types of maintenance\nCorrective maintenance aims to correct any remaining errors regardless of where they may cause specifications, design, coding, testing, and documentation, etc.\nAdaptive Maintenance is used for modifying the software to match changes in the ever-changing environment.\nPerfective Maintenance, It defines improving processing efficiency or performance or restricting the software to enhance changeability. This may contain enhancement of existing system functionality, improvement in computational efficiency, etc.": {"Why do we need software maintenance ?": {"score": 0.06189780309796333, "start": 91, "end": 193, "answer": "to modify and update software application after delivery to correct errors and to improve performance."}, "What is Corrective Maintenance ?": {"score": 0.18207888305187225, "start": 873, "end": 946, "answer": "modifying the software to match changes in the ever-changing environment."}, "What is Adaptive Maintenance ?": {"score": 0.387898713350296, "start": 873, "end": 946, "answer": "modifying the software to match changes in the ever-changing environment."}, "What is Perfective maintenance ?": {"score": 0.2177434116601944, "start": 974, "end": 1082, "answer": "defines improving processing efficiency or performance or restricting the software to enhance changeability."}}, "Even after the software product being delivered, if required and desired, changes and updating are done for the software product. This is known as software maintenance\n\n- Corrective Maintenance is used to solve problems which are either discovered by the user or the reports generated by the user.\n- Adaptive Maintenance helps keep the product up-dated with respect to the technological changes, the software is modified and updated by using adaptive maintenance.\n- Perfective Maintenance \u00e2\u20ac\u201c To increase the life and usability of the software, modification and updates are done to the software, know as perfective maintenance. The performance and the reliability of the software is improved and increased by the refining the requirements of the user and adding new features.\n- Preventive Maintenance \u00e2\u20ac\u201c The probable future problems of the software are prevented by regularly updating and modifying the software which is known as preventive maintenance. The issues that are likely to cause big problems in the future are being addressed by preventive maintenance.": {"Why do we need software maintenance ?": {"score": 0.0466085784137249, "start": 493, "end": 527, "answer": "To increase the life and usability"}, "What is Corrective Maintenance ?": {"score": 0.051430296152830124, "start": 202, "end": 259, "answer": "to solve problems which are either discovered by the user"}, "What is Adaptive Maintenance ?": {"score": 0.6176134347915649, "start": 321, "end": 395, "answer": "helps keep the product up-dated with respect to the technological changes,"}, "What is Perfective maintenance ?": {"score": 0.13057804107666016, "start": 493, "end": 544, "answer": "To increase the life and usability of the software,"}}}, "What are different types of keys in DBMS ?": {"Primary Key: The primary key of a relational table uniquely identifies each record in the table. It can either be a normal attribute that is guaranteed to be unique (such as Social Security Number in a table with no more than one record per person) or it can be generated by the DBMS\n\nSuper Key: A superkey is a combination of attributes that can be uniquely used to identify a database record. A table might have many superkeys. Candidate keys are a special subset of superkeys that do not have any extraneous information in them.\n\nCandidate Key: A candidate key is a combination of attributes that can be uniquely used to identify a database record without any extraneous data. Each table may have one or more candidate keys. One of these candidate keys is selected as the table primary key.\n\nForeign Key: A foreign key is a field (or fields) that points to the primary key of another table. The purpose of the foreign key is to ensure referential integrity of the data. In other words, only values that are supposed to appear in the database are permitted.\n\nComposite Key : A composite key is a key that uses more than one column to identify the data as opposed to a single column. This can sometimes be more useful than assigning each row an arbitrary value to use as a key such as an auto number field.": {"what is primary key ?": {"score": 0.532805860042572, "start": 51, "end": 96, "answer": "uniquely identifies each record in the table."}, "What is a superkey ?": {"score": 0.7293111681938171, "start": 310, "end": 394, "answer": "a combination of attributes that can be uniquely used to identify a database record."}, "What is candidate key ?": {"score": 0.08592479676008224, "start": 567, "end": 650, "answer": "a combination of attributes that can be uniquely used to identify a database record"}, "What is a foreign key ?": {"score": 0.4099770784378052, "start": 825, "end": 893, "answer": "a field (or fields) that points to the primary key of another table."}}, "Candidate Key - The candidate keys in a table are defined as the set of keys that is minimal and can uniquely identify any data row in the table.\n\n- Primary Key - The primary key is selected from one of the candidate keys and becomes the identifying key of a table. It can uniquely identify any data row of the table.\n- Super Key - Super Key is the superset of primary key. The super key contains a set of attributes, including the primary key, which can uniquely identify any data row in the table.\n- Composite Key - If any single attribute of a table is not capable of being the key i.e it cannot identify a row uniquely, then we combine two or more attributes to form a key. This is known as a composite key.\n- Secondary Key - Only one of the candidate keys is selected as the primary key. The rest of them are known as secondary keys.\n- Foreign Key - A foreign key is an attribute value in a table that acts as the primary key in another another. Hence, the foreign key is useful in linking together two tables. Data should be entered in the foreign key column with great care, as wrongly entered data can invalidate the relationship between the two tables.\n": {"what is primary key ?": {"score": 0.325930118560791, "start": 234, "end": 265, "answer": "the identifying key of a table."}, "What is a superkey ?": {"score": 0.8199217319488525, "start": 345, "end": 373, "answer": "the superset of primary key."}, "What is candidate key ?": {"score": 0.13539756834506989, "start": 61, "end": 92, "answer": "the set of keys that is minimal"}, "What is a foreign key ?": {"score": 0.46301642060279846, "start": 872, "end": 950, "answer": "an attribute value in a table that acts as the primary key in another another."}}}}