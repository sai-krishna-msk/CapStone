{"('what is critical section ?', 'The part of the process, where the code for accessing the shared resources is written, that part or section is the critical section (CS) of that process. Now the critical section problem is to implement such a solution, which can be used by the processes to cooperate when they share common resources.\\n\\nTo execute its critical section, a process must take care of the three properties mutual exclusion, progress and bounded wait. Possessing these three properties a process can execute its critical section successfully. \\n\\n\\n')": {"score": 0.1985922008752823, "start": 190, "end": 219, "answer": "to implement such a solution,"}, "('how many process can be executed ? ', 'The part of the process, where the code for accessing the shared resources is written, that part or section is the critical section (CS) of that process. Now the critical section problem is **to implement such a solution, **which can be used by the processes to cooperate when they share common resources.\\n\\nTo execute its critical section, a process must take care of the three properties mutual exclusion, progress and bounded wait. Possessing these three properties a process can execute its critical section successfully. \\n\\n\\n')": {"score": 0.252475768327713, "start": 451, "end": 456, "answer": "three"}, "('what is mutual exclusion ?', 'The part of the process, where the code for accessing the shared resources is written, that part or section is the critical section (CS) of that process. Now the critical section problem is **to implement such a solution, **which can be used by the processes to cooperate when they share common resources.\\n\\nTo execute its critical section, a process must take care of the three properties mutual exclusion, progress and bounded wait. Possessing these **three **properties a process can execute its critical section successfully. \\n\\n\\n')": {"score": 0.35869309306144714, "start": 372, "end": 388, "answer": "three properties"}, "('what is critical section ?', \"When more than one processes access a same code segment that segment is known as critical section. Critical section contains shared variables or resources which are needed to be synchronized to maintain consistency of data variable.\\n\\nMutual Exclusion : If a process is executing in its critical section, then no other process is allowed to execute in the critical section.\\n\\nProgress : If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter in the critical section next, and the selection can not be postponed indefinitely.\\n\\n\\nBounded Waiting : A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.\\n\\nFollowing are the methods used to solve peterson solution\\n\\nPeterson's solution is widely used solution to critical section problems.\\n\\nSome operating system offers a lock functionality where a Process acquires a lock when entering the Critical section and releases the lock after leaving it.\\n\\n\\nSemaphores\\nA Semaphore is an integer variable, which can be accessed only through two operations wait() and signal().\\nThere are two types of semaphores : Binary Semaphores and Counting Semaphores\")": {"score": 0.20983478426933289, "start": 125, "end": 154, "answer": "shared variables or resources"}, "('how many process can be executed ? ', \"When more than one processes access a same code segment that segment is known as critical section. Critical section contains **shared variables or resources **which are needed to be synchronized to maintain consistency of data variable.\\n\\nMutual Exclusion : If a process is executing in its critical section, then no other process is allowed to execute in the critical section.\\n\\nProgress : If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter in the critical section next, and the selection can not be postponed indefinitely.\\n\\n\\nBounded Waiting : A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.\\n\\nFollowing are the methods used to solve peterson solution\\n\\nPeterson's solution is widely used solution to critical section problems.\\n\\nSome operating system offers a lock functionality where a Process acquires a lock when entering the Critical section and releases the lock after leaving it.\\n\\n\\nSemaphores\\nA Semaphore is an integer variable, which can be accessed only through two operations wait() and signal().\\nThere are two types of semaphores : Binary Semaphores and Counting Semaphores\")": {"score": 0.03389803320169449, "start": 1311, "end": 1314, "answer": "two"}, "('what is mutual exclusion ?', \"When more than one processes access a same code segment that segment is known as critical section. Critical section contains **shared variables or resources **which are needed to be synchronized to maintain consistency of data variable.\\n\\nMutual Exclusion : If a process is executing in its critical section, then no other process is allowed to execute in the critical section.\\n\\nProgress : If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter in the critical section next, and the selection can not be postponed indefinitely.\\n\\n\\nBounded Waiting : A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.\\n\\nFollowing are the methods used to solve peterson solution\\n\\nPeterson's solution is widely used solution to critical section problems.\\n\\nSome operating system offers a lock functionality where a Process acquires a lock when entering the Critical section and releases the lock after leaving it.\\n\\n\\nSemaphores\\nA Semaphore is an integer variable, which can be accessed only through **two **operations wait() and signal().\\nThere are two types of semaphores : Binary Semaphores and Counting Semaphores\")": {"score": 0.3548561632633209, "start": 257, "end": 307, "answer": "If a process is executing in its critical section,"}, "('what is critical section ?', 'A Critical Section is a code segment that accesses shared variables and has to be executed as an atomic action. It means that in a group of cooperating processes, at a given point of time, only one process must be executing its critical section. If any other process also wants to execute its critical section, it must wait until the first one finishes.\\n\\n\\n\\n\\nProcess Synchronization is the task of coordinating the execution of processes in a way that no two processes can have access to the same shared data and resources.\\n\\n\\nTo avoid any consistency in the result the three properties that should be considered mandatorily to implement critical section are as follow:\\n\\n1. Mutual Exclusion\\nOnly one process can execute its critical section at a time. The other process must wait until the previous process has completed its critical section execution completely\\n\\n2. Progress\\nIf a process doesn\u00e2\u20ac\u2122t want to enter in its critical section. It should not be permitted to block another process from entering it, in its critical section.\\n\\n3. Bounded Waiting\\nThere is a bounded time up to which the process has to wait to enter its critical section after making the request. The system can\u00e2\u20ac\u2122t keep waiting, a process for the indefinite time to enter its critical section. Anyhow the execution of the critical section takes a short duration. So, every process requesting to enter its critical section get the chance within the finite amount of time.\\n\\n\\n\\nSynchronization Hardware\\nMany systems provide hardware support for critical section code. The critical section problem could be solved easily in a single-processor environment if we could disallow interrupts to occur while a shared variable or resource is being modified.\\n\\nIn this manner, we could be sure that the current sequence of instructions would be allowed to execute in order without pre-emption. Unfortunately, this solution is not feasible in a multiprocessor environment.\\n\\nDisabling interrupt on a multiprocessor environment can be time consuming as the message is passed to all the processors.\\n\\nThis message transmission lag, delays entry of threads into critical section and the system efficiency decreases.\\n\\n\\n\\nMutex Locks\\nAs the synchronization hardware solution is not easy to implement for everyone, a strict software approach called Mutex Locks was introduced. In this approach, in the entry section of code, a LOCK is acquired over the critical resources modified and used inside critical section, and in the exit section that LOCK is released.\\n\\nAs the resource is locked while a process executes its critical section hence no other process can access it.\\n\\n\\n')": {"score": 0.3356647491455078, "start": 22, "end": 67, "answer": "a code segment that accesses shared variables"}, "('how many process can be executed ? ', 'A Critical Section is **a code segment that accesses shared variables **and has to be executed as an atomic action. It means that in a group of cooperating processes, at a given point of time, only one process must be executing its critical section. If any other process also wants to execute its critical section, it must wait until the first one finishes.\\n\\n\\n\\n\\nProcess Synchronization is the task of coordinating the execution of processes in a way that no two processes can have access to the same shared data and resources.\\n\\n\\nTo avoid any consistency in the result the three properties that should be considered mandatorily to implement critical section are as follow:\\n\\n1. Mutual Exclusion\\nOnly one process can execute its critical section at a time. The other process must wait until the previous process has completed its critical section execution completely\\n\\n2. Progress\\nIf a process doesn\u00e2\u20ac\u2122t want to enter in its critical section. It should not be permitted to block another process from entering it, in its critical section.\\n\\n3. Bounded Waiting\\nThere is a bounded time up to which the process has to wait to enter its critical section after making the request. The system can\u00e2\u20ac\u2122t keep waiting, a process for the indefinite time to enter its critical section. Anyhow the execution of the critical section takes a short duration. So, every process requesting to enter its critical section get the chance within the finite amount of time.\\n\\n\\n\\nSynchronization Hardware\\nMany systems provide hardware support for critical section code. The critical section problem could be solved easily in a single-processor environment if we could disallow interrupts to occur while a shared variable or resource is being modified.\\n\\nIn this manner, we could be sure that the current sequence of instructions would be allowed to execute in order without pre-emption. Unfortunately, this solution is not feasible in a multiprocessor environment.\\n\\nDisabling interrupt on a multiprocessor environment can be time consuming as the message is passed to all the processors.\\n\\nThis message transmission lag, delays entry of threads into critical section and the system efficiency decreases.\\n\\n\\n\\nMutex Locks\\nAs the synchronization hardware solution is not easy to implement for everyone, a strict software approach called Mutex Locks was introduced. In this approach, in the entry section of code, a LOCK is acquired over the critical resources modified and used inside critical section, and in the exit section that LOCK is released.\\n\\nAs the resource is locked while a process executes its critical section hence no other process can access it.\\n\\n\\n')": {"score": 0.23883581161499023, "start": 698, "end": 701, "answer": "one"}, "('what is mutual exclusion ?', 'A Critical Section is **a code segment that accesses shared variables **and has to be executed as an atomic action. It means that in a group of cooperating processes, at a given point of time, only one process must be executing its critical section. If any other process also wants to execute its critical section, it must wait until the first one finishes.\\n\\n\\n\\n\\nProcess Synchronization is the task of coordinating the execution of processes in a way that no two processes can have access to the same shared data and resources.\\n\\n\\nTo avoid any consistency in the result the three properties that should be considered mandatorily to implement critical section are as follow:\\n\\n1. Mutual Exclusion\\nOnly **one **process can execute its critical section at a time. The other process must wait until the previous process has completed its critical section execution completely\\n\\n2. Progress\\nIf a process doesn\u00e2\u20ac\u2122t want to enter in its critical section. It should not be permitted to block another process from entering it, in its critical section.\\n\\n3. Bounded Waiting\\nThere is a bounded time up to which the process has to wait to enter its critical section after making the request. The system can\u00e2\u20ac\u2122t keep waiting, a process for the indefinite time to enter its critical section. Anyhow the execution of the critical section takes a short duration. So, every process requesting to enter its critical section get the chance within the finite amount of time.\\n\\n\\n\\nSynchronization Hardware\\nMany systems provide hardware support for critical section code. The critical section problem could be solved easily in a single-processor environment if we could disallow interrupts to occur while a shared variable or resource is being modified.\\n\\nIn this manner, we could be sure that the current sequence of instructions would be allowed to execute in order without pre-emption. Unfortunately, this solution is not feasible in a multiprocessor environment.\\n\\nDisabling interrupt on a multiprocessor environment can be time consuming as the message is passed to all the processors.\\n\\nThis message transmission lag, delays entry of threads into critical section and the system efficiency decreases.\\n\\n\\n\\nMutex Locks\\nAs the synchronization hardware solution is not easy to implement for everyone, a strict software approach called Mutex Locks was introduced. In this approach, in the entry section of code, a LOCK is acquired over the critical resources modified and used inside critical section, and in the exit section that LOCK is released.\\n\\nAs the resource is locked while a process executes its critical section hence no other process can access it.\\n\\n\\n')": {"score": 0.5417189002037048, "start": 693, "end": 757, "answer": "Only **one **process can execute its critical section at a time."}, "('what is critical section ?', \"The critical section is a code segment where the shared variables can be accessed. An atomic action is required in a critical section i.e. only one process can execute in its critical section at a time. All the other processes have to wait to execute in their critical sections.\\n\\n\\n\\n\\nA solution to the critical section problem must satisfy the following three conditions:\\n\\n1. Mutual Exclusion\\nOut of a group of cooperating processes, only one process can be in its critical section at a given point of time.\\n\\n\\n2. Progress\\nIf no process is in its critical section, and if one or more threads want to execute their critical section then any one of these threads must be allowed to get into its critical section.\\n\\n\\n3. Bounded Waiting\\nAfter a process makes a request for getting into its critical section, there is a limit for how many other processes can get into their critical section, before this process's request is granted. So after the limit is reached, system must grant the process permission to get into its critical section.\\n\\nFollowing are the ways to avoid critical section problem\\n\\nLock Variable\\nThis is the simplest synchronization mechanism. This is a Software Mechanism implemented in User mode. This is a busy waiting solution which can be used for more than two processes.\\n\\nIn this mechanism, a Lock variable lockis used. Two values of lock can be possible, either 0 or 1. Lock value 0 means that the critical section is vacant while the lock value 1 means that it is occupied.\\n\\nA process which wants to get into the critical section first checks the value of the lock variable. If it is 0 then it sets the value of lock as 1 and enters into the critical section, otherwise it waits.\")": {"score": 0.4799777865409851, "start": 24, "end": 82, "answer": "a code segment where the shared variables can be accessed."}, "('how many process can be executed ? ', \"The critical section is **a code segment where the shared variables can be accessed. **An atomic action is required in a critical section i.e. only one process can execute in its critical section at a time. All the other processes have to wait to execute in their critical sections.\\n\\n\\n\\n\\nA solution to the critical section problem must satisfy the following three conditions:\\n\\n1. Mutual Exclusion\\nOut of a group of cooperating processes, only one process can be in its critical section at a given point of time.\\n\\n\\n2. Progress\\nIf no process is in its critical section, and if one or more threads want to execute their critical section then any one of these threads must be allowed to get into its critical section.\\n\\n\\n3. Bounded Waiting\\nAfter a process makes a request for getting into its critical section, there is a limit for how many other processes can get into their critical section, before this process's request is granted. So after the limit is reached, system must grant the process permission to get into its critical section.\\n\\nFollowing are the ways to avoid critical section problem\\n\\nLock Variable\\nThis is the simplest synchronization mechanism. This is a Software Mechanism implemented in User mode. This is a busy waiting solution which can be used for more than two processes.\\n\\nIn this mechanism, a Lock variable lockis used. Two values of lock can be possible, either 0 or 1. Lock value 0 means that the critical section is vacant while the lock value 1 means that it is occupied.\\n\\nA process which wants to get into the critical section first checks the value of the lock variable. If it is 0 then it sets the value of lock as 1 and enters into the critical section, otherwise it waits.\")": {"score": 0.12720784544944763, "start": 148, "end": 151, "answer": "one"}, "('what is mutual exclusion ?', \"The critical section is **a code segment where the shared variables can be accessed. **An atomic action is required in a critical section i.e. only **one **process can execute in its critical section at a time. All the other processes have to wait to execute in their critical sections.\\n\\n\\n\\n\\nA solution to the critical section problem must satisfy the following three conditions:\\n\\n1. Mutual Exclusion\\nOut of a group of cooperating processes, only one process can be in its critical section at a given point of time.\\n\\n\\n2. Progress\\nIf no process is in its critical section, and if one or more threads want to execute their critical section then any one of these threads must be allowed to get into its critical section.\\n\\n\\n3. Bounded Waiting\\nAfter a process makes a request for getting into its critical section, there is a limit for how many other processes can get into their critical section, before this process's request is granted. So after the limit is reached, system must grant the process permission to get into its critical section.\\n\\nFollowing are the ways to avoid critical section problem\\n\\nLock Variable\\nThis is the simplest synchronization mechanism. This is a Software Mechanism implemented in User mode. This is a busy waiting solution which can be used for more than two processes.\\n\\nIn this mechanism, a Lock variable lockis used. Two values of lock can be possible, either 0 or 1. Lock value 0 means that the critical section is vacant while the lock value 1 means that it is occupied.\\n\\nA process which wants to get into the critical section first checks the value of the lock variable. If it is 0 then it sets the value of lock as 1 and enters into the critical section, otherwise it waits.\")": {"score": 0.14547666907310486, "start": 441, "end": 516, "answer": "only one process can be in its critical section at a given point of time."}}